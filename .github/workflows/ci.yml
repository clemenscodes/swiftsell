name: ci

on:
    push:
        branches: [main]
    pull_request:
        types: [opened, synchronize]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
    cancel-in-progress: true

env:
    NEXT_TELEMETRY_DISABLED: 1
    NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 2
    NX_CLOUD_DISTRIBUTED_EXECUTION: true
    # NX_CLOUD_AGENT_TIMEOUT_MS: 60000
    NX_EXEC: 'npx nx affected --nx-bail --base=$NX_BASE --head=$NX_HEAD --output-style=stream --parallel=$NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT --target'
    CI: true
    ARTEFACT_REGISTRY_REGION: europe-west1

jobs:
    set-agents:
        runs-on: ubuntu-latest
        name: Set Agent Matrix
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - name: Calculate Matrix
              id: set-matrix
              shell: bash
              run: |
                  AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array($NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT)).map((_, i) => i + 1)));")
                  echo $AGENTS_JSON_ARRAY
                  echo "matrix=$AGENTS_JSON_ARRAY" >> $GITHUB_OUTPUT

    prisma:
        name: Prisma
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Node Cache
              id: node_cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      dist/**/.next/cache
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Build Prisma Clients
              run: npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=prisma-generate --output-style=stream

    test:
        name: Test
        runs-on: ubuntu-latest
        needs: prisma
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Node Cache
              id: node_cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      dist/**/.next/cache
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Format Workspace
              run: npx nx-cloud record -- npx nx format:check --libs-and-apps --no-dte

            - name: Start Agents
              if: needs.agents.result != 'failure' &&
                  needs.agents.result != 'cancelled' &&
                  needs.agents.result != 'skipped'
              run: npx nx-cloud start-ci-run --stop-agents-after=e2e

            - name: Run Agents
              id: agents
              if: needs.agents.result != 'failure' &&
                  needs.agents.result != 'cancelled' &&
                  needs.agents.result != 'skipped'
              uses: jameshenry/parallel-bash-commands@v1
              with:
                  cmd1: $NX_EXEC lint
                  cmd2: $NX_EXEC build
                  cmd3: $NX_EXEC test
                  cmd4: npx nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=1 --target=e2e

            - name: Stop Agents
              if: always()
              run: npx nx-cloud stop-all-agents

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ secrets.REPO_GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

    agents:
        name: Agent ${{ matrix.agent }}
        needs: [set-agents, prisma]
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        strategy:
            matrix:
                agent:
                    - ${{fromJson(needs.set-agents.outputs.matrix)}}
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Restore Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      dist/**/.next/cache
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Run Agent
              run: npx nx-cloud start-agent

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ secrets.REPO_GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

    release:
        name: Release
        runs-on: ubuntu-latest
        needs: [test, agents]
        defaults:
            run:
                shell: bash
        steps:
            - name: Checkout
              if: startsWith(github.ref, 'refs/heads/main')
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Restore Node Cache
              id: node_cache
              if: startsWith(github.ref, 'refs/heads/main')
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      dist/**/.next/cache
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node
              if: startsWith(github.ref, 'refs/heads/main')
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true' && startsWith(github.ref, 'refs/heads/main')
              run: yarn install --immutable

            - name: Setup Git
              if: startsWith(github.ref, 'refs/heads/main')
              uses: fregante/setup-git-user@v1

            - name: Prepare Release
              if: startsWith(github.ref, 'refs/heads/main')
              run: yarn bump --no-dte

            - name: Extract version
              id: extract_version
              if: startsWith(github.ref, 'refs/heads/main')
              run: |
                  version=$(git describe --tags $(git rev-list --tags --max-count=1))
                  echo $version
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Generate Release Body
              id: release_body
              if: startsWith(github.ref, 'refs/heads/main')
              run: npx extract-changelog-release 2>/dev/null 1>RELEASE_BODY.md || echo "Nothing to release"

            - name: Release
              if: startsWith(github.ref, 'refs/heads/main')
              uses: ncipollo/release-action@v1.12.0
              with:
                  token: ${{ secrets.REPO_GITHUB_TOKEN }}
                  tag: ${{ steps.extract_version.outputs.version }}
                  artifactErrorsFailBuild: true
                  skipIfReleaseExists: true
                  bodyFile: RELEASE_BODY.md

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ secrets.REPO_GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: [test, agents, release]
        defaults:
            run:
                shell: bash
        permissions:
            contents: 'read'
            id-token: 'write'
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Expose GitHub Runtime
              uses: crazy-max/ghaction-github-runtime@v2

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Restore Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      dist/**/.next/cache
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Authenticate to Google Cloud
              id: auth
              uses: google-github-actions/auth@v1
              with:
                  workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
                  service_account: ${{ secrets.SERVICE_ACCOUNT }}

            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v1

            - name: Setup Docker Artifact Registry Auth
              run: gcloud auth configure-docker $ARTEFACT_REGISTRY_REGION-docker.pkg.dev

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_wrapper: false

            - name: Start Agents
              if: needs.deploy-agents.result != 'failure' &&
                  needs.deploy-agents.result != 'cancelled' &&
                  needs.deploy-agents.result != 'skipped'
              run: npx nx-cloud start-ci-run --stop-agents-after=deploy

            - name: Run Agents (development)
              if: needs.deploy-agents.result != 'failure' &&
                  needs.deploy-agents.result != 'cancelled' &&
                  needs.deploy-agents.result != 'skipped' &&
                  github.event.pull_request.head.repo.full_name == github.repository
              uses: jameshenry/parallel-bash-commands@v1
              with:
                  cmd1: $NX_EXEC deploy --skip-nx-cache
              env:
                  INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
                  SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}

            - name: Run Agents (production)
              if: needs.deploy-agents.result != 'failure' &&
                  needs.deploy-agents.result != 'cancelled' &&
                  needs.deploy-agents.result != 'skipped' &&
                  github.event_name != 'pull_request' && github.ref_name == 'main'
              uses: jameshenry/parallel-bash-commands@v1
              with:
                  cmd1: $NX_EXEC deploy --skip-nx-cache --configuration=production
              env:
                  INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
                  SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}

            - name: Stop Agents
              if: always()
              run: npx nx-cloud stop-all-agents

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ secrets.REPO_GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

    deploy-agents:
        name: Deploy Agent ${{ matrix.agent }}
        needs: [set-agents, test, agents, release]
        runs-on: ubuntu-latest
        permissions:
            contents: 'read'
            id-token: 'write'
        defaults:
            run:
                shell: bash
        strategy:
            matrix:
                agent:
                    - ${{fromJson(needs.set-agents.outputs.matrix)}}
        steps:
            - name: Checkout [Pull Request]
              uses: actions/checkout@v3
              if: github.event_name == 'pull_request'
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 0

            - name: Checkout [Main]
              uses: actions/checkout@v3
              if: github.event_name != 'pull_request'
              with:
                  fetch-depth: 0

            - name: Expose GitHub Runtime
              uses: crazy-max/ghaction-github-runtime@v2

            - name: Derive SHAs
              uses: nrwl/nx-set-shas@v3

            - name: Install Node
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Restore Node Cache
              id: node_cache
              uses: actions/cache/restore@v3
              with:
                  path: |
                      ~/.cache/Cypress/
                      dist/**/.next/cache
                      node_modules/
                  key: ubuntu-latest-node-${{ hashFiles('yarn.lock') }}
                  restore-keys: ubuntu-latest-node-

            - name: Install Node Dependencies
              if: steps.node_cache.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Authenticate to Google Cloud
              id: auth
              uses: google-github-actions/auth@v1
              with:
                  workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
                  service_account: ${{ secrets.SERVICE_ACCOUNT }}

            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v1

            - name: Setup Docker Artifact Registry Auth
              run: gcloud auth configure-docker $ARTEFACT_REGISTRY_REGION-docker.pkg.dev

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_wrapper: false

            - name: Run Agent
              run: npx nx-cloud start-agent
              env:
                  INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
                  SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}

            - name: Abort Workflow
              if: failure()
              run: |
                  curl -X POST -H "Authorization: Bearer ${{ secrets.REPO_GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel

            - name: Delete Artifacts
              if: failure()
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'

    cleanup:
        name: Cleanup
        runs-on: ubuntu-latest
        needs: [deploy, deploy-agents]
        steps:
            - name: Delete Artifacts
              uses: geekyeggo/delete-artifact@v2
              with:
                  name: '*'
