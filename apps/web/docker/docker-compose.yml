version: '3.9'
name: swiftsell
services:
    web:
        env_file: '../config/.env.local'
        depends_on: ['api']
        container_name: web
        build:
            context: '../../../'
            dockerfile: apps/web/docker/Dockerfile.development
        restart: always
        ports:
            - '3000:3000'
        command: 'npx nx start web'
        volumes:
            - '../../web:/app/apps/web'
            - '../../api:/app/apps/api'
            - '../../../services/postgres:/app/services/postgres'
            - '../../../services/firebase:/app/services/firebase'
            - '../../../libs:/app/libs'
        networks:
            - frontend
            - backend
    api:
        env_file: '../../api/.env'
        depends_on: ['postgres']
        container_name: api
        command: 'npx nx start api'
        restart: always
        build:
            context: '../../../'
            dockerfile: apps/api/docker/Dockerfile.development
        ports:
            - '5000:5000'
        volumes:
            - '../../api:/app/apps/api'
            - '../../../services/postgres:/app/services/postgres'
            - '../../../libs:/app/libs'
        networks:
            - backend
    postgres:
        depends_on: ['shadow']
        container_name: postgres
        build:
            context: '../../../'
            dockerfile: services/postgres/Dockerfile
        restart: always
        ports:
            - '5432:5432'
        volumes:
            - '../../../services/hasura/init.sql:/docker-entrypoint-initdb.d/init.sql'
        networks:
            - backend
    shadow:
        container_name: shadow
        build:
            context: '../../../'
            dockerfile: services/postgres/Dockerfile
        restart: always
        ports:
            - '6543:5432'
        volumes:
            - '../../../services/hasura/init.sql:/docker-entrypoint-initdb.d/init.sql'
        networks:
            - backend
    hasura:
        env_file: '../../../services/hasura/.env.skeleton'
        container_name: hasura
        build:
            context: '../../../'
            dockerfile: services/hasura/Dockerfile
        ports:
            - '9090:8080'
        depends_on: ['postgres']
        restart: always
        networks:
            - backend

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge
